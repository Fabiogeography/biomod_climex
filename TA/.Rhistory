writeRaster(env.p, paste0(wd, "env_p"))
writeRaster(env.bkg, paste0(wd, "env_bkg"))
writeRaster(env.p, paste0(wd, "env_p"))
writeRaster(env.bkg, paste0(wd, "env_bkg"))
writeRaster(env.bkg, paste0(wd, "env_bkg"))
# library(foreign)
library(raster)
# library(rgdal)
# library(sp)
# library(MASS)
library(biomod2)
# library(ade4) # for dudi.pca
# library(ncdf4)
library(dplyr) # for function written get_PAtab
wd <- "E:\\NON_PROJECT\\TUTA_ABSOLUTA\\DISTRIBUTION_MODELS\\R\\TO_SHARE_GITHUB\\"
##### Set up run #####
nreps <- 4 ## Number of pseudo-absence datasets created
techs <- c('GLM','GAM', 'SRE','RF','ANN','FDA','MAXENT.Phillips','GBM','CTA','MARS') ##, excluded because failing
# tss.thresh <- 0.4 ## Models with a TSS below this are not included in the weighted mean ensemble.
id <- "TA"
bkg.diam <-  1000000000 # is essentially unlimited, 2000000 is 2000km, 500000 is 500km
glob.eqarea.proj <- "+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84"
# Function for extracting presence-absence table by D Georges, https://rpubs.com/dgeorges/416446
get_PAtab <- function(bfd){
dplyr::bind_cols(
x = bfd@coord[, 1],
y = bfd@coord[, 2],
status = bfd@data.species,
bfd@PA
)
}
###### Environmental data #######
env.p <- stack(paste0(wd, "env_p"))
env.bkg <- stack(paste0(wd, "env_bkg"))
###### Distribution data #######
pres.sp <- read.csv(paste0(wd, "\\pres.csv"))
# library(foreign)
library(raster)
# library(rgdal)
# library(sp)
# library(MASS)
library(biomod2)
# library(ade4) # for dudi.pca
# library(ncdf4)
library(dplyr) # for function written get_PAtab
wd <- "E:\\NON_PROJECT\\TUTA_ABSOLUTA\\DISTRIBUTION_MODELS\\R\\TO_SHARE_GITHUB\\"
##### Set up run #####
nreps <- 4 ## Number of pseudo-absence datasets created
techs <- c('GLM','GAM', 'SRE','RF','ANN','FDA','MAXENT.Phillips','GBM','CTA','MARS') ##, excluded because failing
# tss.thresh <- 0.4 ## Models with a TSS below this are not included in the weighted mean ensemble.
id <- "TA"
bkg.diam <-  1000000000# is essentially unlimited, 2000000 is 2000km, 500000 is 500km
glob.eqarea.proj <- "+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84"
# Function for extracting presence-absence table by D Georges, https://rpubs.com/dgeorges/416446
get_PAtab <- function(bfd){
dplyr::bind_cols(
x = bfd@coord[, 1],
y = bfd@coord[, 2],
status = bfd@data.species,
bfd@PA
)
}
###### Environmental data #######
env.p <- stack("E:\\NON_PROJECT\\TUTA_ABSOLUTA\\DISTRIBUTION_MODELS\\ENV_DATA\\env_p_17thDec") ## Exemplar climate has been resampled onto a square grid so that Maxent can project biomod2 models
env.bkg <- stack("E:\\NON_PROJECT\\TUTA_ABSOLUTA\\DISTRIBUTION_MODELS\\ENV_DATA\\env_bkg_17thDec")
dropLayers <- c("gdd14")
env.bkg <- dropLayer(env.bkg, dropLayers)
env.p <- dropLayer(env.p, dropLayers) ## Have to remove it from the region projecting to as well (in this case the world)
writeRaster(env.p, paste0(wd, "env_p"))
###### Distribution data #######
pres <- read.dbf("E:\\NON_PROJECT\\TUTA_ABSOLUTA\\DISTRIBUTION\\XYfinaldata_7thDec2018_use.dbf")
pres <- pres[pres$use_yrroun == 1,]
pres <- pres[pres$wokID>0,] ## Only the WOK data for github
pres <- pres[, c("decimalLon","decimalLat")]
pres.sp <- SpatialPointsDataFrame(coords=pres, data=as.data.frame(rep(1,nrow(pres))))
names(pres.sp) <- "sp"
projection(pres.sp) <- CRS(" +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
pres.sp <- spTransform(pres.sp, CRS(glob.eqarea.proj))
library(foreign)
###### Distribution data #######
pres <- read.dbf("E:\\NON_PROJECT\\TUTA_ABSOLUTA\\DISTRIBUTION\\XYfinaldata_7thDec2018_use.dbf")
pres <- pres[pres$use_yrroun == 1,]
pres <- pres[pres$wokID>0,] ## Only the WOK data for github
pres <- pres[, c("decimalLon","decimalLat")]
pres.sp <- SpatialPointsDataFrame(coords=pres, data=as.data.frame(rep(1,nrow(pres))))
names(pres.sp) <- "sp"
projection(pres.sp) <- CRS(" +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
pres.sp <- spTransform(pres.sp, CRS(glob.eqarea.proj))
## Reduce presence data to 10minute resolution
world.1 <- (env.p$MAP/env.p$MAP)-1# (env.p.orig$MAP/env.p.orig$MAP)-1
n <- as.numeric(names(table(cellFromXY(world.1,pres.sp))))
pres.sp <- as.data.frame(cbind(xyFromCell(env.p,n),1))
colnames(pres.sp) <- c("x","y","sp")
coordinates(pres.sp) <- ~x+y
projection(pres.sp) <- CRS(glob.eqarea.proj)
## Reduce the points to one per grid-cell
pres.sp <- na.omit(as.data.frame(cbind(pres.sp, extract(env.bkg[[1]],pres.sp))))[,c("sp","x","y")]
summary(pres.sp)
write.csv(as.data.frame(pres.sp), paste0(wd, "\\pres.csv"), row.names = F)
pres.sp <- read.csv(paste0(wd, "\\pres.csv"))
head(pres.sp)
pres.sp@data
pres <- read.dbf("E:\\NON_PROJECT\\TUTA_ABSOLUTA\\DISTRIBUTION\\XYfinaldata_7thDec2018_use.dbf")
pres <- pres[pres$use_yrroun == 1,]
pres <- pres[pres$wokID>0,] ## Only the WOK data for github
pres <- pres[, c("decimalLon","decimalLat")]
pres.sp <- SpatialPointsDataFrame(coords=pres, data=as.data.frame(rep(1,nrow(pres))))
names(pres.sp) <- "sp"
projection(pres.sp) <- CRS(" +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
pres.sp <- spTransform(pres.sp, CRS(glob.eqarea.proj))
## Reduce presence data to 10minute resolution
world.1 <- (env.p$MAP/env.p$MAP)-1# (env.p.orig$MAP/env.p.orig$MAP)-1
n <- as.numeric(names(table(cellFromXY(world.1,pres.sp))))
pres.sp <- as.data.frame(cbind(xyFromCell(env.p,n),1))
colnames(pres.sp) <- c("x","y","sp")
coordinates(pres.sp) <- ~x+y
projection(pres.sp) <- CRS(glob.eqarea.proj)
## Reduce the points to one per grid-cell
pres.sp <- na.omit(as.data.frame(cbind(pres.sp, extract(env.bkg[[1]],pres.sp))))[,c("sp","x","y")]
pres.sp@data
is.data.frame(pres.sp)
head(pres.sp)
write.csv(as.data.frame(pres.sp), paste0(wd, "\\pres.csv"), row.names = F)
pres.sp <- read.csv(paste0(wd, "\\pres.csv"))
coordinates(pres.sp) <- ~x+y
head(pres.sp)
library(raster) ## To load and manipulate rasters
library(biomod2) ## To run and evaluate biomod species distribution models
library(dplyr) ## For function written get_PAtab
library(modEvA) ## Calculate evaluation satistics
wd <- "E:/NON_PROJECT/TUTA_ABSOLUTA/DISTRIBUTION_MODELS/R/TO_SHARE_GITHUB/"
##### Set up run #####
nreps <- 4 ## Number of pseudo-absence datasets created and used
techs <- c('GLM','GAM', 'SRE','RF','ANN','FDA','MAXENT.Phillips','GBM','CTA','MARS') ## biomod techniques to use
id <- "TA" ## A unique identifier for the model run (e.g. indicating species name, environmental variables used, etc...). Should be short. In
eval.stat <- "ROC" ## Choice of evaluation statistic. Support is provided here for ROC, TSS, and kappa, though others are possible. Only AUC can be calculated without a choice of threshold. See ?BIOMOD_Modeling for all options that could be applied to biomod results and modEvAmethods("multModEv") for all options that could be applied to climex results using this code.
generate.PA <- T ## Whether biomod should generate and save its own pseudo-absence sets. Set to F if you want to supply your own.
# Function for extracting presence-absence table. By D Georges, https://rpubs.com/dgeorges/416446
get_PAtab <- function(bfd){
dplyr::bind_cols(
x = bfd@coord[, 1],
y = bfd@coord[, 2],
status = bfd@data.species,
bfd@PA
)}
# Function for extracting presence-absence table. By D Georges, https://rpubs.com/dgeorges/416446
get_PAtab <- function(bfd){
dplyr::bind_cols(
x = bfd@coord[, 1],
y = bfd@coord[, 2],
status = bfd@data.species,
bfd@PA
)}
###### Load environmental data #######
env.bkg <- stack(paste0(wd, "env_bkg")) ### Data covering the region where the species is recorded present/absent and which is used to construct the SDM
env.p <- stack(paste0(wd, "env_p")) ### Data covering the region where the species' range will be projected
?BIOMOD_Projection
library(raster) ## To load and manipulate rasters
library(biomod2) ## To run and evaluate biomod species distribution models
library(dplyr) ## For function written get_PAtab
library(modEvA) ## Calculate evaluation satistics
wd <- "E:/NON_PROJECT/TUTA_ABSOLUTA/DISTRIBUTION_MODELS/R/TO_SHARE_GITHUB/"
##### Set up run #####
nreps <- 4 ## Number of pseudo-absence datasets created and used
techs <- c('GLM','GAM', 'SRE','RF','ANN','FDA','MAXENT.Phillips','GBM','CTA','MARS') ## biomod techniques to use
id <- "TA" ## A unique identifier for the model run (e.g. indicating species name, environmental variables used, etc...). Should be short. In
eval.stat <- "KAPPA" ## Choice of evaluation statistic. Support is provided here for ROC, TSS, and KAPPA, though others are possible. Only AUC can be calculated without a choice of threshold. See ?BIOMOD_Modeling for all options that could be applied to biomod results and modEvAmethods("multModEv") for all options that could be applied to climex results using this code.
generate.SDM <- T ## Whether this code will make biomod predictions (T) or load predictions made previously (F)
generate.PA <- F ## Whether biomod should generate and save its own pseudo-absence sets (T) or if the user will supply their own (F).
### Prepare output directory
wd.out <- paste0(wd,id,"/")
dir.create(wd.out)
setwd(wd.out)
### Function for extracting presence-absence table. By D Georges, https://rpubs.com/dgeorges/416446
get_PAtab <- function(bfd){
dplyr::bind_cols(
x = bfd@coord[, 1],
y = bfd@coord[, 2],
status = bfd@data.species,
bfd@PA
)}
### Load environmental data
env.bkg <- stack(paste0(wd, "env_bkg")) ### Data covering the region where the species is recorded present/absent and which is used to construct the SDM
env.p <- stack(paste0(wd, "env_p")) ### Data covering the region where the species' range will be projected
### If the Maxent.Phillips method of constructing an SDM is to be used, give the pathway to the folder where the software is saved
myBiomodOption <- BIOMOD_ModelingOptions(
MAXENT.Phillips = list( path_to_maxent.jar = "E:/NON_PROJECT/TUTA_ABSOLUTA/DISTRIBUTION_MODELS/") ## Ensure there are no spaces or non-alphanumeric characters in this pathway.
)
if (isTRUE(generate.SDM)) {
##### Prepare data for biomod SDMs #####
if (isTRUE(generate.PA)) { ## biomod places the pseudo-absences
### Load species presence data
pres.sp <- read.csv(paste0(wd, "/pres.csv")) ## A data frame with columns 'sp' (containing 1, indicating the species is present), 'x' and 'y' (the coordinates of the presences)
coordinates(pres.sp) <- ~x+y ## Convert the data frame to a points spatial data frame
### Enter presence data and use biomod to place pseudo-absences
### Here pseudo-absences are placed randomly throughout the background. The number of pseudo-absences is made to be the same as the number of presences.
myBiomodData <- BIOMOD_FormatingData(resp.var = pres.sp, ## The response variable (i.e. presences)
expl.var = env.bkg, ## The explanatory variables (i.e. background environmental data)
resp.name = id,  ## The unique identifier for the model created
PA.nb.rep = nreps, ## The number of pseudo-absence datasets created and used
PA.nb.absences = nrow(pres.sp), ## Number of pseudo-absences
PA.strategy = 'random', ## How to place the pseudo-absences
na.rm = TRUE) ## Remove any presence / pseudo-absence points with missing environmental data from the analysis
### Extract and save the pseudo-absence data created above. A tibble with columns:
### 'x' and 'y' (coordinates),
### 'status' (containing 1 or NA, indicating the species is present or absent respectively),
### 'PA1', 'PA2' ... 'PAn' where n is nreps, the number of pseudo-absence datasets created. Each column contains 'TRUE' or 'FALSE', indicating whether the corresponding point location is used in the named presence / pseudo-absence dataset.
pa <- get_PAtab(myBiomodData)
write.csv(pa, paste0(wd.out,"/pseudoabs.csv"), row.names=F)
} else { ## User uploads their own table of presences / pseudo-absences. A tibble with columns:
### 'x' and 'y' (coordinates),
### 'status' (containing 1 or NA, indicating the species is present or absent respectively),
### 'PA1', 'PA2' ... 'PAn' where n is nreps, the number of pseudo-absence datasets created. Each column contains 'TRUE' or 'FALSE', indicating whether the corresponding point location is used in the named presence / pseudo-absence dataset.
pa.tab <- read.csv(paste0(wd,"/presence_pseudoabs.csv"))
resp.var <- pa.tab[, c("x","y","status")] ## The presences
coordinates(resp.var) <- ~x+y ## Convert the data frame to a points spatial data frame
pa <- pa.tab[,grep("PA",colnames(pa.tab))] ## The PA.table indicating the pseudo-absences selection
### Create biomod data with the manual data
myBiomodData <- BIOMOD_FormatingData(resp.var = resp.var, ## The response variable (i.e. presences)
expl.var = env.bkg, ## The explanatory variables (i.e. background environmental data)
resp.name = id, ## The unique identifier for the model created
PA.nb.rep = nreps, ## The number of pseudo-absence datasets created and used
PA.strategy = 'user.defined',
PA.table = pa, ## Defined above.
na.rm = TRUE) ## Remove any presence / pseudo-absence points with missing environmental data from the analysis
}
##### Calculate and project the biomod SDMs #####
myBiomodModelOut <- BIOMOD_Modeling(
myBiomodData, ## Defined above.
models = techs, ## SDM techniques. Defined above.
models.options = myBiomodOption, ## Defined above.
NbRunEval=1, ## 1 cross-validation runs per pseudo-absence set.
DataSplit=70, ## Proportion of data randomly assigned to the calibration data. Models made with calibration data have '_RUN1' added to name (or RUN2 etc... if NBRunEval >1). Others have '_Full'
VarImport=3, ## Number of permutations with which to evaluate variable importance
models.eval.meth = eval.stat,
SaveObj = TRUE, ## save data to hard drive
rescal.all.models = F, ## Scales all model predictions from 0-1 with binomial GLM
do.full.models = TRUE, ## In addition to models made with the calibration data for cross-validation. Have 'Full' added to name
modeling.id = id)
##### Project the full models made with each presence and pseudo-absence dataset #####
### Name the models to be projected.
### Can project either models made with all presence / pseudo-absence data in a dataset ('_Full')
### or with the calibration data only ('_RUN1', '_RUN2' ... '_RUNn' where n is NBRunEval)
mods2proj <- vector()
for(a in paste0("PA",c(1:nreps))) { mods2proj <- c(mods2proj, paste0(id,"_",a,"_Full_", techs)) }
### Project models
myBiomodProj <- BIOMOD_Projection(
modeling.output = myBiomodModelOut, ## The object containing the SDMs. Defined above.
new.env = env.p, ## Environmental data covering the region where the species' range will be projected
proj.name = paste0(id, '_Full'), ## Can project either models made with all presence / pseudo-absence data in a dataset ('_FULL') or with the calibration data only ('_RUN1', '_RUN2' etc...)
selected.models = mods2proj, ## Defined above.
binary.meth = NULL, ## Whether the continuous projections are thresholded into suitably/unsuitable
filtered.meth = NULL, ## Thresholding technique
compress = 'xz', ## Compression format of objects stored on hard drive
clamping.mask = F, ## A mask would identify locations where predictions are uncertain because the values of the environmental variables are outside the range used for calibrating the models
output.format = '.grd' ## Format in which to save the outputted rasters
)
##### Tabulate evaluation statistics for individual biomod models (from validation data #####
myBiomodModelEval <- get_evaluations(myBiomodModelOut)
eval <- as.data.frame(myBiomodModelEval[eval.stat,"Testing.data",,"RUN1",]) ## Get the cross-validation evaluation statistic for all models and pseudo-absence sets. Need to change "RUN1" if do multiple cross-evaluations.
} else {
### Load the evaluation statistics saved for all the models made in a previous biomod2 run.
### The value for models.eval.meth supplied in BIOMOD_modeling must be the same as the value given for eval.stat, above.
### Note the filepath given below will be correct if you used the code above to set the working directory for biomod2: wd.out <- paste0(wd,id,"/")
load(paste0(wd.out,id,"/.BIOMOD_DATA/",id,"/models.evaluation"))
eval <- as.data.frame(models.evaluation[eval.stat,"Testing.data",,"RUN1",]) ## Get the cross-validation evaluation statistic for all models and pseudo-absence sets. Need to change "RUN1" if do multiple cross-evaluations.
## User uploads their own table of presences / pseudo-absences for climex evaluation. A tibble with columns:
### 'x' and 'y' (coordinates),
### 'status' (containing 1 or NA, indicating the species is present or absent respectively),
### 'PA1', 'PA2' ... 'PAn' where n is nreps, the number of pseudo-absence datasets created. Each column contains 'TRUE' or 'FALSE', indicating whether the corresponding point location is used in the named presence / pseudo-absence dataset.
pa.tab <- read.csv(paste0(wd,"/presence_pseudoabs.csv"))
}
##### Load and evaluate CLIMEX model #####
### Obtain the correct name for the chosen evaluation statistic - as used by multModEv
if(eval.stat=="ROC") {eval.stat.climex <- "AUC"}
if(eval.stat=="KAPPA") {eval.stat.climex <- "kappa"}
if(eval.stat=="TSS") {eval.stat.climex <- eval.stat}
### Load CLIMEX model
climex <- raster(paste0(wd, "san_ei"))
climex <- climex/100 ## convert to 0-1 numeric scale
climex <- projectRaster(climex, crs=crs(env.p)) ## transform projection to match biomod models
climex <- resample(climex, env.p[[1]]) ## resample to resolution of biomod models
### Evaluate the CLIMEX model
evaluate.climex <- function (x) {
### Obtain vectors of the predictions (pred) and the presence / pseudo-absences (occ)
pa.rep <- as.data.frame(pa.tab[,c("x","y","status", paste0("PA",x))]) ## Select the appropriate pseudo-absence column
colnames(pa.rep) <- c("x","y","status", "PA")
pa.rep <- as.data.frame(pa.rep[pa.rep$PA==T,]) ## Select only the pseudo-absences used in the relevent pseudo-absence set
occ <- pa.rep[pa.rep$PA==T,"status"] ## Create a vector of the presence / pseudo-absences
occ[is.na(occ)] <- 0 ## Give pseudo-absences a value of 0.
pred <- extract(climex, pa.rep[,c("x","y")]) ## Extract the climex predictions at the PA locations
### Obtain evaluation statistic
out <- multModEv(obs.data = as.data.frame(occ),
pred.data = as.data.frame(pred),
measures = eval.stat.climex,#)
thresh = "preval") ## Note the threshold must be set appropriately if kappa or TSS are required.
out <- out[,-1] ## Retain only the evaluation statistic
}
climex.eval <- lapply(1:nreps, evaluate.climex)
climex.eval
climex.eval
eval.stat.climex
##### Unite evaluation statistics for biomod2 and CLIMEX models
eval["climex", ] <- climex.eval
eval$mean  <- apply(eval, MARGIN=1, FUN="mean")
eval$sd <- apply(eval[,names(eval) !="mean"], MARGIN=1, FUN="sd")
eval$model <- rownames(eval)
write.csv(eval, paste0(wd.out, eval.stat,"_eval_",id,".csv"), row.names = F)
# library(foreign) ## load dbfs
library(raster)
library(Weighted.Desc.Stat)
wd.out <- paste0(wd,id,"/")
wd <- "E:/NON_PROJECT/TUTA_ABSOLUTA/DISTRIBUTION_MODELS/R/TO_SHARE_GITHUB/"
wd.out <- paste0(wd,id,"/")
rs.biomod <- stack(paste0(wd.out, "\\proj_",id,"_FULL\\proj_",id, "_FULL.gri"))
paste0(wd.out, "\\proj_",id,"_FULL\\proj_",id, "_FULL.gri")
rs.biomod <- stack(paste0(wd.out, "/proj_",id,"_FULL/proj_",id, "_FULL.gri"))
paste0(wd.out, "/proj_",id,"_FULL/proj_",id, "_FULL.gri")
rs.biomod <- stack(paste0(wd.out, "proj_",id,"_FULL/proj_",id, "_FULL.gri"))
paste0(wd.out, "proj_",id,"_FULL/proj_",id, "_FULL.gri")
rs.biomod <- stack(paste0(wd.out, "proj_",id,"_FULL/proj_",id, "_FULL_",id,".gri"))
paste0(wd.out, "proj_",id,"_FULL/proj_",id, "_FULL_",id,".gri")
rs.biomod <- stack(paste0(wd.out, "proj_",id,"_Full/proj_",id, "_Full_",id,".gri"))
paste0(wd.out, "proj_",id,"_Full/proj_",id, "_Full_",id,".gri"
)
rs.biomod <- stack(paste0(wd.out, "proj_",id,"/",id,"_Full/proj_",id, "_Full_",id,".gri"))
paste0(wd.out, "proj_",id,"/",id,"_Full/proj_",id, "_Full_",id,".gri")
rs.biomod <- stack(paste0(wd.out, "/",id, "proj_",id,"_Full/proj_",id, "_Full_",id,".gri"))
paste0(wd.out, "/",id, "proj_",id,"_Full/proj_",id, "_Full_",id,".gri")
rs.biomod <- stack(paste0(wd.out,id, "proj_",id,"_Full/proj_",id, "_Full_",id,".gri"))
paste0(wd.out,id, "proj_",id,"_Full/proj_",id, "_Full_",id,".gri")
rs.biomod <- stack(paste0(wd.out, id, "/proj_",id,"_Full/proj_",id, "_Full_",id,".gri"))
### Load in rasters of model projections and save the ones to be averaged as tifs
# wts <- numeric()
### Note the filepath given below is based on the folders automatically created by biomod2
### It will be correct if you used the code above to set the working directory: wd.out <- paste0(wd,id,"/")
rs.biomod <- stack(paste0(wd.out, id, "/proj_",id,"_Full/proj_",id, "_Full_",id,".gri"))
rs.biomod <- rs.biomod / 1000 ## convert to 0-1 numerical scale
rs.climex <- raster(paste0(wd, "\\proj_", id, "_FULL\\",id, "_Full_CLIMEX"))
### Load CLIMEX model
climex <- raster(paste0(wd, "san_ei"))
climex <- climex/100 ## convert to 0-1 numeric scale
climex <- projectRaster(climex, crs=crs(env.p)) ## transform projection to match biomod models
climex <- resample(climex, env.p[[1]]) ## resample to resolution of biomod models
## Obtain evaluation statistic from cross-validation for biomod
eval.biomod <- read.csv(paste0(wd.out, eval.stat,"_eval_",id,".csv"))
eval.stat
##### Set up run #####
# nreps <- 4 ## Number of pseudo-absence datasets created and used
# techs <- c('GLM','GAM', 'SRE','RF','ANN','FDA','MAXENT.Phillips','GBM','CTA','MARS') ## biomod techniques to use
id <- "TA" ## A unique identifier for the model run (e.g. indicating species name, environmental variables used, etc...). Should be short. In
eval.stat <- "ROC" ## Choice of evaluation statistic. Support is provided here for ROC, TSS, and KAPPA, though others are possible. Only AUC can be calculated without a choice of threshold. See ?BIOMOD_Modeling for all options that could be applied to biomod results and modEvAmethods("multModEv") for all options that could be applied to climex results using this code.
incl.climex <- T ## Include CLIMEX in ensemble even if its evaluation statistic falls below the threshold
thresh <- 0.8 ## The value above which models should be included in the ensemble.
## Obtain evaluation statistic from cross-validation for biomod
eval.biomod <- read.csv(paste0(wd.out, eval.stat,"_eval_",id,".csv"))
eval.stat
eval.biomod
## Obtain evaluation statistic from cross-validation for biomod
eval <- read.csv(paste0(wd.out, eval.stat,"_eval_",id,".csv"))
rm(eval.biomod)
## Select biomod models whose evaluation statistic falls above the threshold
eval <- as.matrix(eval[,grep("PA", colnames(eval))])
eval[eval<thresh] <- NA
eval
nms.mat <- matrix(names(rs.biomod), ncol=ncol(eval), nrow=(length(names(rs.biomod))/ncol(eval)))
nms.mat
nms.mat[is.na(eval)] <- NA
nms <- na.omit(as.vector(nms.mat))
nms
## Stack biomod and CLIMEX models
rs <- stack(rs.biomod, climex)
nms <- matrix(names(rs), ncol=ncol(eval), nrow=(length(names(rs))/ncol(eval)))
names(rs)
## Obtain evaluation statistics from cross-validation
eval <- read.csv(paste0(wd.out, eval.stat,"_eval_",id,".csv"))
eval
## Select models whose evaluation statistic falls above the threshold
eval <- as.matrix(eval[,grep("PA", colnames(eval))])
eval[eval<thresh] <- NA
eval
ncol(eval)
(length(names(rs))/ncol(eval))
## Obtain evaluation statistics from cross-validation for biomod models
eval <- read.csv(paste0(wd.out, eval.stat,"_eval_",id,".csv"))
rownames(eval)
## Select models whose evaluation statistic falls above the threshold
eval <- as.matrix(eval[-10,grep("PA", colnames(eval))])
eval
## Obtain evaluation statistics from cross-validation for biomod models
eval <- read.csv(paste0(wd.out, eval.stat,"_eval_",id,".csv"))
eval
rownames(eval) <- eval$model
## Obtain evaluation statistics from cross-validation for biomod models
eval <- read.csv(paste0(wd.out, eval.stat,"_eval_",id,".csv"))
rownames(eval) <- eval$model
## Select models whose evaluation statistic falls above the threshold
eval <- as.matrix(eval[, grep("PA", colnames(eval))])
eval
## Select models whose evaluation statistic falls above the threshold
eval <- as.matrix(eval[-climex, grep("PA", colnames(eval))])
## Select models whose evaluation statistic falls above the threshold
eval <- as.matrix(eval[-"climex", grep("PA", colnames(eval))])
## Obtain evaluation statistics from cross-validation for biomod models
eval <- read.csv(paste0(wd.out, eval.stat,"_eval_",id,".csv"))
rownames(eval) <- eval$model
## Select models whose evaluation statistic falls above the threshold
eval <- as.matrix(eval["climex", grep("PA", colnames(eval))])
eval
## Select models whose evaluation statistic falls above the threshold
eval <- as.matrix(eval[!"climex", grep("PA", colnames(eval))])
## Select models whose evaluation statistic falls above the threshold
eval <- as.matrix(eval[!climex, grep("PA", colnames(eval))])
## Obtain evaluation statistics from cross-validation for biomod models
eval <- read.csv(paste0(wd.out, eval.stat,"_eval_",id,".csv"))
rownames(eval) <- eval$model
## Select models whose evaluation statistic falls above the threshold
eval <- as.matrix(eval[!climex, grep("PA", colnames(eval))])
## Obtain evaluation statistics from cross-validation for biomod models
eval <- read.csv(paste0(wd.out, eval.stat,"_eval_",id,".csv"))
rownames(eval) <- eval$model
eval[!climex,]
is.data.frame(eval)
eval[!(rownames(eval)!="climex"),]
eval[(rownames(eval)!="climex"),]
## Obtain evaluation statistics from cross-validation for biomod models
eval <- read.csv(paste0(wd.out, eval.stat,"_eval_",id,".csv"))
rownames(eval) <- eval$model
## Select models whose evaluation statistic falls above the threshold
eval <- as.matrix(eval[(rownames(eval)!="climex"), grep("PA", colnames(eval))])
eval
## Obtain evaluation statistics from cross-validation for biomod models
eval <- read.csv(paste0(wd.out, eval.stat,"_eval_",id,".csv"))
rownames(eval) <- eval$model
## Select models whose evaluation statistic falls above the threshold
eval.biomod <- as.matrix(eval[(rownames(eval)!="climex"), grep("PA", colnames(eval))]) ## Make a table without the CLIMEX stats
eval.biomod[eval.biomod<thresh] <- NA
nms <- matrix(names(rs.biomod), ncol=ncol(eval.biomod), nrow=(length(names(rs.biomod))/ncol(eval.biomod)))
nms[is.na(eval)] <- NA
nms <- na.omit(as.vector(nms)) ## A vector of names of models whose evaluation statistic falls above the threshold
rs.biomod <- rs.biomod[[nms]] # Only the rasters that fall above the threshold
rs.biomod
climex <- raster(paste0(wd, "san_ei"))
climex <- climex/100 ## convert to 0-1 numeric scale
climex <- projectRaster(climex, crs=crs(env.p)) ## transform projection to match biomod models
climex <- resample(climex, env.p[[1]]) ## resample to resolution of biomod models
## Obtain evaluation statistic from the full model for CLIMEX
eval.climex <- as.matrix(eval[(rownames(eval)=="climex"), grep("PA", colnames(eval))]) ## Make a table without the CLIMEX stats
eval.climex
## Obtain evaluation statistic from the full model for CLIMEX
eval.climex <- as.matrix(eval[(rownames(eval)=="climex"), "mean"]) ## Make a table without the CLIMEX stats
eval.climex
if(isTRUE(incl.climex)) {
eval.climex <- 1
} else {
### Obtain mean evaluation statistic from the multiple validations of the full model for CLIMEX
eval.climex <- as.matrix(eval[(rownames(eval)=="climex"), "mean"]) ## Make a table without the CLIMEX stats
}
eval.climex
rs <- stack(rs.biomod, climex)
wts <- na.omit(as.vector(c(eval.biomod, eval.climex))) ## calculate the weights for the ensembles.
wts
eval.climex
wts <- na.omit(as.vector(eval.biomod)) ## calculate the weights for the ensembles.
wts
length(rs.biomod)
nlayers(rs.biomod)
eval.biomod
### If CLIMEX should be included in the ensemble regardless of it's evaluation statistic, set it's evaluation statistic to be 1.
### Note this also sets the weight to 1.
if(isTRUE(incl.climex)) {
eval.climex <- 1
# rs <- stack(rs.biomod, climex) ## Stack the raster projections from the models to be ensembled
# wts <- na.omit(as.vector(c(eval.biomod, eval.climex))) ## Calculate the weights for the ensembles.
} else {
### If CLIMEX should only be included in the ensemble if its mean evaluation statistic is above the threshold, obtain the mean evaluation statistic from the multiple validations of the full model for CLIMEX
eval.climex <- eval[(rownames(eval)=="climex"), "mean"]
}
### Stack the raster projections from the models to be ensembled
if(eval.climex > thresh) { ## Does the eval stat for climex fall above threshold?
rs <- stack(rs.biomod, climex)
wts <- na.omit(as.vector(c(eval.biomod, eval.climex))) ## calculate the weights for the ensembles.
} else {
rs <- rs.biomod
wts <- na.omit(as.vector(eval.biomod)) ## calculate the weights for the ensembles.
}
rs
names(rs)
names(climex) <- "climex"
### If CLIMEX should be included in the ensemble regardless of it's evaluation statistic, set it's evaluation statistic to be 1.
### Note this also sets the weight to 1.
if(isTRUE(incl.climex)) {
eval.climex <- 1
# rs <- stack(rs.biomod, climex) ## Stack the raster projections from the models to be ensembled
# wts <- na.omit(as.vector(c(eval.biomod, eval.climex))) ## Calculate the weights for the ensembles.
} else {
### If CLIMEX should only be included in the ensemble if its mean evaluation statistic is above the threshold, obtain the mean evaluation statistic from the multiple validations of the full model for CLIMEX
eval.climex <- eval[(rownames(eval)=="climex"), "mean"]
}
### Stack the raster projections from the models to be ensembled
if(eval.climex > thresh) { ## Does the eval stat for climex fall above threshold?
rs <- stack(rs.biomod, climex)
wts <- na.omit(as.vector(c(eval.biomod, eval.climex))) ## calculate the weights for the ensembles.
} else {
rs <- rs.biomod
wts <- na.omit(as.vector(eval.biomod)) ## calculate the weights for the ensembles.
}
rs
names(rs)
### Calculate and save the ensemble (the mean projection value weighted by the evaluation statistics of the constituent models
wmean <- weighted.mean(rs, wts) ## Mean suitability predicted by all models, weighted by AUC and only including models with AUC>threshold
writeRaster(wmean, paste0(wd.out, "/wmean_", id,".tiff"))
